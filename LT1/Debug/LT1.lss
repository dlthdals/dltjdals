
LT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000fb6  0000104a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800108  00800108  00001052  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d8a  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000983  00000000  00000000  00001e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a61  00000000  00000000  0000281d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00003280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ef  00000000  00000000  00003867  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003e56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 eb       	ldi	r30, 0xB6	; 182
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d6       	rcall	.+3076   	; 0xcc8 <main>
  c4:	76 c7       	rjmp	.+3820   	; 0xfb2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <turn>:
      PORTE = 0b00001010;
      OCR1A = leftsSd + 367;
      OCR1B = rightSpd + 367;   
      for(int k = 0; k < mdelay; k++) _delay_ms(100);
      OCR1A = 0;
      OCR1B = 0;
  c8:	61 15       	cp	r22, r1
  ca:	71 05       	cpc	r23, r1
  cc:	09 f0       	breq	.+2      	; 0xd0 <turn+0x8>
  ce:	7e c0       	rjmp	.+252    	; 0x1cc <turn+0x104>
  d0:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <led>
  d4:	20 95       	com	r18
  d6:	2b bb       	out	0x1b, r18	; 27
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	51 05       	cpc	r21, r1
  dc:	49 f4       	brne	.+18     	; 0xf0 <turn+0x28>
  de:	2e e0       	ldi	r18, 0x0E	; 14
  e0:	23 b9       	out	0x03, r18	; 3
  e2:	19 bc       	out	0x29, r1	; 41
  e4:	18 bc       	out	0x28, r1	; 40
  e6:	81 59       	subi	r24, 0x91	; 145
  e8:	9e 4f       	sbci	r25, 0xFE	; 254
  ea:	9b bd       	out	0x2b, r25	; 43
  ec:	8a bd       	out	0x2a, r24	; 42
  ee:	0a c0       	rjmp	.+20     	; 0x104 <turn+0x3c>
  f0:	45 2b       	or	r20, r21
  f2:	41 f4       	brne	.+16     	; 0x104 <turn+0x3c>
  f4:	26 e0       	ldi	r18, 0x06	; 6
  f6:	23 b9       	out	0x03, r18	; 3
  f8:	81 59       	subi	r24, 0x91	; 145
  fa:	9e 4f       	sbci	r25, 0xFE	; 254
  fc:	99 bd       	out	0x29, r25	; 41
  fe:	88 bd       	out	0x28, r24	; 40
 100:	9b bd       	out	0x2b, r25	; 43
 102:	8a bd       	out	0x2a, r24	; 42
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	49 e6       	ldi	r20, 0x69	; 105
 108:	88 e1       	ldi	r24, 0x18	; 24
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	40 40       	sbci	r20, 0x00	; 0
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <turn+0x42>
 112:	00 c0       	rjmp	.+0      	; 0x114 <turn+0x4c>
 114:	00 00       	nop
 116:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <led>
 11a:	80 95       	com	r24
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led+0x1>
 122:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led>
 126:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sensdata+0x1>
 12a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <sensdata>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	36 c0       	rjmp	.+108    	; 0x1a0 <turn+0xd8>
 134:	28 2f       	mov	r18, r24
 136:	20 64       	ori	r18, 0x40	; 64
 138:	27 b9       	out	0x07, r18	; 7
 13a:	26 b1       	in	r18, 0x06	; 6
 13c:	20 64       	ori	r18, 0x40	; 64
 13e:	26 b9       	out	0x06, r18	; 6
 140:	34 9b       	sbis	0x06, 4	; 6
 142:	fe cf       	rjmp	.-4      	; 0x140 <turn+0x78>
 144:	24 b1       	in	r18, 0x04	; 4
 146:	35 b1       	in	r19, 0x05	; 5
 148:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <adc+0x1>
 14c:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <adc>
 150:	2a 3c       	cpi	r18, 0xCA	; 202
 152:	33 40       	sbci	r19, 0x03	; 3
 154:	24 f1       	brlt	.+72     	; 0x19e <turn+0xd6>
 156:	20 e8       	ldi	r18, 0x80	; 128
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	08 2e       	mov	r0, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <turn+0x9a>
 15e:	35 95       	asr	r19
 160:	27 95       	ror	r18
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <turn+0x96>
 166:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <led>
 16a:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <led+0x1>
 16e:	24 2b       	or	r18, r20
 170:	35 2b       	or	r19, r21
 172:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <led+0x1>
 176:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <led>
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	08 2e       	mov	r0, r24
 180:	02 c0       	rjmp	.+4      	; 0x186 <turn+0xbe>
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <turn+0xba>
 18a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <sensdata>
 18e:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <sensdata+0x1>
 192:	24 2b       	or	r18, r20
 194:	35 2b       	or	r19, r21
 196:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <sensdata+0x1>
 19a:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <sensdata>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	88 30       	cpi	r24, 0x08	; 8
 1a2:	91 05       	cpc	r25, r1
 1a4:	3c f2       	brlt	.-114    	; 0x134 <turn+0x6c>
 1a6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sensdata>
 1aa:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sensdata+0x1>
 1ae:	87 3e       	cpi	r24, 0xE7	; 231
 1b0:	91 05       	cpc	r25, r1
 1b2:	39 f0       	breq	.+14     	; 0x1c2 <turn+0xfa>
 1b4:	87 3f       	cpi	r24, 0xF7	; 247
 1b6:	91 05       	cpc	r25, r1
 1b8:	21 f0       	breq	.+8      	; 0x1c2 <turn+0xfa>
 1ba:	8f 3e       	cpi	r24, 0xEF	; 239
 1bc:	91 05       	cpc	r25, r1
 1be:	09 f0       	breq	.+2      	; 0x1c2 <turn+0xfa>
 1c0:	ae cf       	rjmp	.-164    	; 0x11e <turn+0x56>
 1c2:	1b bc       	out	0x2b, r1	; 43
 1c4:	1a bc       	out	0x2a, r1	; 42
 1c6:	19 bc       	out	0x29, r1	; 41
 1c8:	18 bc       	out	0x28, r1	; 40
 1ca:	08 95       	ret
 1cc:	61 30       	cpi	r22, 0x01	; 1
 1ce:	71 05       	cpc	r23, r1
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <turn+0x10c>
 1d2:	79 c0       	rjmp	.+242    	; 0x2c6 <turn+0x1fe>
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	51 05       	cpc	r21, r1
 1d8:	49 f4       	brne	.+18     	; 0x1ec <turn+0x124>
 1da:	2b e0       	ldi	r18, 0x0B	; 11
 1dc:	23 b9       	out	0x03, r18	; 3
 1de:	1b bc       	out	0x2b, r1	; 43
 1e0:	1a bc       	out	0x2a, r1	; 42
 1e2:	81 59       	subi	r24, 0x91	; 145
 1e4:	9e 4f       	sbci	r25, 0xFE	; 254
 1e6:	99 bd       	out	0x29, r25	; 41
 1e8:	88 bd       	out	0x28, r24	; 40
 1ea:	0a c0       	rjmp	.+20     	; 0x200 <turn+0x138>
 1ec:	45 2b       	or	r20, r21
 1ee:	41 f4       	brne	.+16     	; 0x200 <turn+0x138>
 1f0:	29 e0       	ldi	r18, 0x09	; 9
 1f2:	23 b9       	out	0x03, r18	; 3
 1f4:	81 59       	subi	r24, 0x91	; 145
 1f6:	9e 4f       	sbci	r25, 0xFE	; 254
 1f8:	9b bd       	out	0x2b, r25	; 43
 1fa:	8a bd       	out	0x2a, r24	; 42
 1fc:	99 bd       	out	0x29, r25	; 41
 1fe:	88 bd       	out	0x28, r24	; 40
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	99 e6       	ldi	r25, 0x69	; 105
 204:	28 e1       	ldi	r18, 0x18	; 24
 206:	81 50       	subi	r24, 0x01	; 1
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	20 40       	sbci	r18, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <turn+0x13e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <turn+0x148>
 210:	00 00       	nop
 212:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <led>
 216:	80 95       	com	r24
 218:	8b bb       	out	0x1b, r24	; 27
 21a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led+0x1>
 21e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led>
 222:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sensdata+0x1>
 226:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <sensdata>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	36 c0       	rjmp	.+108    	; 0x29c <turn+0x1d4>
 230:	28 2f       	mov	r18, r24
 232:	20 64       	ori	r18, 0x40	; 64
 234:	27 b9       	out	0x07, r18	; 7
 236:	26 b1       	in	r18, 0x06	; 6
 238:	20 64       	ori	r18, 0x40	; 64
 23a:	26 b9       	out	0x06, r18	; 6
 23c:	34 9b       	sbis	0x06, 4	; 6
 23e:	fe cf       	rjmp	.-4      	; 0x23c <turn+0x174>
 240:	24 b1       	in	r18, 0x04	; 4
 242:	35 b1       	in	r19, 0x05	; 5
 244:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <adc+0x1>
 248:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <adc>
 24c:	2a 3c       	cpi	r18, 0xCA	; 202
 24e:	33 40       	sbci	r19, 0x03	; 3
 250:	24 f1       	brlt	.+72     	; 0x29a <turn+0x1d2>
 252:	20 e8       	ldi	r18, 0x80	; 128
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	08 2e       	mov	r0, r24
 258:	02 c0       	rjmp	.+4      	; 0x25e <turn+0x196>
 25a:	35 95       	asr	r19
 25c:	27 95       	ror	r18
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <turn+0x192>
 262:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <led>
 266:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <led+0x1>
 26a:	24 2b       	or	r18, r20
 26c:	35 2b       	or	r19, r21
 26e:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <led+0x1>
 272:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <led>
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	08 2e       	mov	r0, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <turn+0x1ba>
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <turn+0x1b6>
 286:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <sensdata>
 28a:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <sensdata+0x1>
 28e:	24 2b       	or	r18, r20
 290:	35 2b       	or	r19, r21
 292:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <sensdata+0x1>
 296:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <sensdata>
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	88 30       	cpi	r24, 0x08	; 8
 29e:	91 05       	cpc	r25, r1
 2a0:	3c f2       	brlt	.-114    	; 0x230 <turn+0x168>
 2a2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sensdata>
 2a6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sensdata+0x1>
 2aa:	87 3e       	cpi	r24, 0xE7	; 231
 2ac:	91 05       	cpc	r25, r1
 2ae:	39 f0       	breq	.+14     	; 0x2be <turn+0x1f6>
 2b0:	87 3f       	cpi	r24, 0xF7	; 247
 2b2:	91 05       	cpc	r25, r1
 2b4:	21 f0       	breq	.+8      	; 0x2be <turn+0x1f6>
 2b6:	8f 3e       	cpi	r24, 0xEF	; 239
 2b8:	91 05       	cpc	r25, r1
 2ba:	09 f0       	breq	.+2      	; 0x2be <turn+0x1f6>
 2bc:	aa cf       	rjmp	.-172    	; 0x212 <turn+0x14a>
 2be:	1b bc       	out	0x2b, r1	; 43
 2c0:	1a bc       	out	0x2a, r1	; 42
 2c2:	19 bc       	out	0x29, r1	; 41
 2c4:	18 bc       	out	0x28, r1	; 40
 2c6:	08 95       	ret

000002c8 <Uart_Init>:
   
}

void Uart_Init(void)
{
   UCSR1A = 0x00;
 2c8:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
   UCSR1B = (1<<TXEN1); //송신 기능 활성화
 2cc:	88 e0       	ldi	r24, 0x08	; 8
 2ce:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
   UCSR1C = (1<<UCSZ11)|(1<<UCSZ10); //8bit
 2d2:	96 e0       	ldi	r25, 0x06	; 6
 2d4:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>


   UBRR1H = 0;
 2d8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
   UBRR1L = 8; // 115200
 2dc:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 2e0:	08 95       	ret

000002e2 <Uart_Trans>:
}

void Uart_Trans(unsigned char data)
{
   while(!(UCSR1A & (1<<UDRE1))); //데이터를 받을 준비가 되면 탈출
 2e2:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 2e6:	95 ff       	sbrs	r25, 5
 2e8:	fc cf       	rjmp	.-8      	; 0x2e2 <Uart_Trans>
   UDR1 = data; //udr에 데이터 저장
 2ea:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 2ee:	08 95       	ret

000002f0 <Uart_Transnum>:
}

void Uart_Transnum(unsigned char* data, int size)
{
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	7c 01       	movw	r14, r24
 2fe:	8b 01       	movw	r16, r22
   for(int i = 0 ; i < size ;i++)
 300:	c0 e0       	ldi	r28, 0x00	; 0
 302:	d0 e0       	ldi	r29, 0x00	; 0
 304:	06 c0       	rjmp	.+12     	; 0x312 <Uart_Transnum+0x22>
   {
      Uart_Trans(data[i]);
 306:	f7 01       	movw	r30, r14
 308:	ec 0f       	add	r30, r28
 30a:	fd 1f       	adc	r31, r29
 30c:	80 81       	ld	r24, Z
 30e:	e9 df       	rcall	.-46     	; 0x2e2 <Uart_Trans>
   UDR1 = data; //udr에 데이터 저장
}

void Uart_Transnum(unsigned char* data, int size)
{
   for(int i = 0 ; i < size ;i++)
 310:	21 96       	adiw	r28, 0x01	; 1
 312:	c0 17       	cp	r28, r16
 314:	d1 07       	cpc	r29, r17
 316:	bc f3       	brlt	.-18     	; 0x306 <Uart_Transnum+0x16>
   {
      Uart_Trans(data[i]);
   }
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	08 95       	ret

00000326 <fgo>:
      for(int k = 0; k < mdelay; k++) _delay_ms(100);
      OCR1A = 0;
      OCR1B = 0;
}
void fgo(int max_speed, int mdelay) // 0~430
{
 326:	8f 92       	push	r8
 328:	9f 92       	push	r9
 32a:	af 92       	push	r10
 32c:	bf 92       	push	r11
 32e:	cf 92       	push	r12
 330:	df 92       	push	r13
 332:	ef 92       	push	r14
 334:	ff 92       	push	r15
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	2e 97       	sbiw	r28, 0x0e	; 14
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	8c 01       	movw	r16, r24
 350:	7b 01       	movw	r14, r22
      crosscnt = 0;
 352:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <crosscnt+0x1>
 356:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <crosscnt>
      lineOvercnt = 0;
 35a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <lineOvercnt+0x1>
 35e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <lineOvercnt>
      fgoBreakcnt = off;
 362:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <fgoBreakcnt+0x1>
 366:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <fgoBreakcnt>

      while (1)
       {
          PORTA = ~led;
 36a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <led>
 36e:	80 95       	com	r24
 370:	8b bb       	out	0x1b, r24	; 27

         PORTE = 0b00001010;
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	83 b9       	out	0x03, r24	; 3
         led = 0b00000000;
 376:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led+0x1>
 37a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led>
         sensdata = 0x00;
 37e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sensdata+0x1>
 382:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <sensdata>
         afterLinecnt = 0;
 386:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <afterLinecnt+0x1>
 38a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <afterLinecnt>
         senscnt = 0;
 38e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <senscnt+0x1>
 392:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <senscnt>
         LfindLine = off;
 396:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <LfindLine+0x1>
 39a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <LfindLine>
         RfindLine = off;
 39e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 3a2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>

          
          for(int i = 0; i < 8; i++)
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	36 c0       	rjmp	.+108    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
          {
             ADMUX = 0x40 | i;
 3ac:	28 2f       	mov	r18, r24
 3ae:	20 64       	ori	r18, 0x40	; 64
 3b0:	27 b9       	out	0x07, r18	; 7
             ADCSRA |= (1 << ADSC);
 3b2:	26 b1       	in	r18, 0x06	; 6
 3b4:	20 64       	ori	r18, 0x40	; 64
 3b6:	26 b9       	out	0x06, r18	; 6
             while(!(ADCSRA & (1 << ADIF)));
 3b8:	34 9b       	sbis	0x06, 4	; 6
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <fgo+0x92>
             adc = ADC;
 3bc:	24 b1       	in	r18, 0x04	; 4
 3be:	35 b1       	in	r19, 0x05	; 5
 3c0:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <adc+0x1>
 3c4:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <adc>
             if(adc >= 970)
 3c8:	2a 3c       	cpi	r18, 0xCA	; 202
 3ca:	33 40       	sbci	r19, 0x03	; 3
 3cc:	24 f1       	brlt	.+72     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
             {
                led |= (128 >> i);
 3ce:	20 e8       	ldi	r18, 0x80	; 128
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	08 2e       	mov	r0, r24
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <fgo+0xb4>
 3d6:	35 95       	asr	r19
 3d8:	27 95       	ror	r18
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <fgo+0xb0>
 3de:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <led>
 3e2:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <led+0x1>
 3e6:	24 2b       	or	r18, r20
 3e8:	35 2b       	or	r19, r21
 3ea:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <led+0x1>
 3ee:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <led>
                sensdata |= (1 << i);
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	08 2e       	mov	r0, r24
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <fgo+0xd8>
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <fgo+0xd4>
 402:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <sensdata>
 406:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <sensdata+0x1>
 40a:	24 2b       	or	r18, r20
 40c:	35 2b       	or	r19, r21
 40e:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <sensdata+0x1>
 412:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <sensdata>
         senscnt = 0;
         LfindLine = off;
         RfindLine = off;

          
          for(int i = 0; i < 8; i++)
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	88 30       	cpi	r24, 0x08	; 8
 41a:	91 05       	cpc	r25, r1
 41c:	3c f2       	brlt	.-114    	; 0x3ac <fgo+0x86>
                led |= (128 >> i);
                sensdata |= (1 << i);
             }
          }
          
         senscnt = sensdata;
 41e:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <sensdata>
 422:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <sensdata+0x1>
 426:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <senscnt+0x1>
 42a:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <senscnt>

          for(afterLinecnt=0; senscnt!=0; afterLinecnt++) {
 42e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <afterLinecnt+0x1>
 432:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <afterLinecnt>
 436:	12 c0       	rjmp	.+36     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
             senscnt&=(senscnt-1);
 438:	9c 01       	movw	r18, r24
 43a:	21 50       	subi	r18, 0x01	; 1
 43c:	31 09       	sbc	r19, r1
 43e:	82 23       	and	r24, r18
 440:	93 23       	and	r25, r19
 442:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <senscnt+0x1>
 446:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <senscnt>
             }
          }
          
         senscnt = sensdata;

          for(afterLinecnt=0; senscnt!=0; afterLinecnt++) {
 44a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <afterLinecnt>
 44e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <afterLinecnt+0x1>
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <afterLinecnt+0x1>
 458:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <afterLinecnt>
 45c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <senscnt>
 460:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <senscnt+0x1>
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	41 f7       	brne	.-48     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
             senscnt&=(senscnt-1);
          }
          if(afterLinecnt <= 4)lineOvercnt = on; // 1110 0111 -> 1100 0011
 468:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <afterLinecnt>
 46c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <afterLinecnt+0x1>
 470:	05 97       	sbiw	r24, 0x05	; 5
 472:	34 f4       	brge	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <lineOvercnt+0x1>
 47c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <lineOvercnt>
          
          switch(sensdata) //속도 설정
 480:	4f 3e       	cpi	r20, 0xEF	; 239
 482:	51 05       	cpc	r21, r1
 484:	09 f4       	brne	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 486:	0a c1       	rjmp	.+532    	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 488:	f4 f4       	brge	.+60     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 48a:	4f 3b       	cpi	r20, 0xBF	; 191
 48c:	51 05       	cpc	r21, r1
 48e:	09 f4       	brne	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	6d c0       	rjmp	.+218    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 492:	64 f4       	brge	.+24     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 494:	4f 37       	cpi	r20, 0x7F	; 127
 496:	51 05       	cpc	r21, r1
 498:	99 f1       	breq	.+102    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 49a:	4f 39       	cpi	r20, 0x9F	; 159
 49c:	51 05       	cpc	r21, r1
 49e:	09 f4       	brne	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	8b c0       	rjmp	.+278    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 4a2:	4f 33       	cpi	r20, 0x3F	; 63
 4a4:	51 05       	cpc	r21, r1
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a8:	35 c2       	rjmp	.+1130   	; 0x914 <__LOCK_REGION_LENGTH__+0x514>
 4aa:	3e c0       	rjmp	.+124    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 4ac:	4f 3d       	cpi	r20, 0xDF	; 223
 4ae:	51 05       	cpc	r21, r1
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b2:	a8 c0       	rjmp	.+336    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 4b4:	47 3e       	cpi	r20, 0xE7	; 231
 4b6:	51 05       	cpc	r21, r1
 4b8:	09 f4       	brne	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4ba:	16 c1       	rjmp	.+556    	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
 4bc:	4f 3c       	cpi	r20, 0xCF	; 207
 4be:	51 05       	cpc	r21, r1
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c2:	28 c2       	rjmp	.+1104   	; 0x914 <__LOCK_REGION_LENGTH__+0x514>
 4c4:	c5 c0       	rjmp	.+394    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4c6:	4b 3f       	cpi	r20, 0xFB	; 251
 4c8:	51 05       	cpc	r21, r1
 4ca:	09 f4       	brne	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4cc:	b1 c1       	rjmp	.+866    	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
 4ce:	6c f4       	brge	.+26     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4d0:	47 3f       	cpi	r20, 0xF7	; 247
 4d2:	51 05       	cpc	r21, r1
 4d4:	09 f4       	brne	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d6:	f8 c1       	rjmp	.+1008   	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
 4d8:	49 3f       	cpi	r20, 0xF9	; 249
 4da:	51 05       	cpc	r21, r1
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4de:	82 c1       	rjmp	.+772    	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
 4e0:	43 3f       	cpi	r20, 0xF3	; 243
 4e2:	51 05       	cpc	r21, r1
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e6:	16 c2       	rjmp	.+1068   	; 0x914 <__LOCK_REGION_LENGTH__+0x514>
 4e8:	c9 c1       	rjmp	.+914    	; 0x87c <__LOCK_REGION_LENGTH__+0x47c>
 4ea:	4d 3f       	cpi	r20, 0xFD	; 253
 4ec:	51 05       	cpc	r21, r1
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	53 c1       	rjmp	.+678    	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
 4f2:	0c f4       	brge	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f4:	2f c1       	rjmp	.+606    	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
 4f6:	4e 3f       	cpi	r20, 0xFE	; 254
 4f8:	51 05       	cpc	r21, r1
 4fa:	09 f4       	brne	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4fc:	17 c1       	rjmp	.+558    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 4fe:	0a c2       	rjmp	.+1044   	; 0x914 <__LOCK_REGION_LENGTH__+0x514>
          {
             case 0b01111111:
                if(lineOvercnt == on)fgoBreakcnt = on;
 500:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 504:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	39 f4       	brne	.+14     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 514:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 518:	11 c2       	rjmp	.+1058   	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  LfindLine = on;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <LfindLine+0x1>
 522:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <LfindLine>
 526:	0a c2       	rjmp	.+1044   	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               }
               break;
             case 0b00111111:
                if(lineOvercnt == on)fgoBreakcnt = on;
 528:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 52c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	39 f4       	brne	.+14     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 53c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 540:	fd c1       	rjmp	.+1018   	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
                else
                {
                   left_dut = 0;
 542:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <left_dut>
 546:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <left_dut+0x1>
 54a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <left_dut+0x2>
 54e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <left_dut+0x3>
                   right_dut = 1;
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	a0 e8       	ldi	r26, 0x80	; 128
 558:	bf e3       	ldi	r27, 0x3F	; 63
 55a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 55e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 562:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 566:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 56a:	e8 c1       	rjmp	.+976    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
                }
                 break;
            case 0b10111111:
               if(lineOvercnt == on)fgoBreakcnt = on;
 56c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 570:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	39 f4       	brne	.+14     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 580:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 584:	db c1       	rjmp	.+950    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  left_dut = 0.20;
 586:	8d ec       	ldi	r24, 0xCD	; 205
 588:	9c ec       	ldi	r25, 0xCC	; 204
 58a:	ac e4       	ldi	r26, 0x4C	; 76
 58c:	be e3       	ldi	r27, 0x3E	; 62
 58e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 592:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 596:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 59a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 1;
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	a0 e8       	ldi	r26, 0x80	; 128
 5a4:	bf e3       	ldi	r27, 0x3F	; 63
 5a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 5aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5ae:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5b2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 5b6:	c2 c1       	rjmp	.+900    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               }
               break;   
            case 0b10011111:
                if(lineOvercnt == on)fgoBreakcnt = on;
 5b8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 5bc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	39 f4       	brne	.+14     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 5cc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 5d0:	b5 c1       	rjmp	.+874    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
                else
                {
                   left_dut = 0.40;
 5d2:	8d ec       	ldi	r24, 0xCD	; 205
 5d4:	9c ec       	ldi	r25, 0xCC	; 204
 5d6:	ac ec       	ldi	r26, 0xCC	; 204
 5d8:	be e3       	ldi	r27, 0x3E	; 62
 5da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 5de:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 5e2:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 5e6:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                   right_dut = 1;
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	a0 e8       	ldi	r26, 0x80	; 128
 5f0:	bf e3       	ldi	r27, 0x3F	; 63
 5f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 5f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5fa:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5fe:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 602:	9c c1       	rjmp	.+824    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
                }
                break;
            case 0b11011111:
               if(lineOvercnt == on)fgoBreakcnt = on;
 604:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 608:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	39 f4       	brne	.+14     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 618:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 61c:	8f c1       	rjmp	.+798    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  left_dut = 0.66;
 61e:	83 ec       	ldi	r24, 0xC3	; 195
 620:	95 ef       	ldi	r25, 0xF5	; 245
 622:	a8 e2       	ldi	r26, 0x28	; 40
 624:	bf e3       	ldi	r27, 0x3F	; 63
 626:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 62a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 62e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 632:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 1;
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	a0 e8       	ldi	r26, 0x80	; 128
 63c:	bf e3       	ldi	r27, 0x3F	; 63
 63e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 642:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 646:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 64a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 64e:	76 c1       	rjmp	.+748    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               }
               break;
             case 0b11001111:
               if(lineOvercnt == on)fgoBreakcnt = on;
 650:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 654:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	39 f4       	brne	.+14     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 664:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 668:	69 c1       	rjmp	.+722    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  left_dut = 0.80;
 66a:	8d ec       	ldi	r24, 0xCD	; 205
 66c:	9c ec       	ldi	r25, 0xCC	; 204
 66e:	ac e4       	ldi	r26, 0x4C	; 76
 670:	bf e3       	ldi	r27, 0x3F	; 63
 672:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 676:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 67a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 67e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 1;
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	a0 e8       	ldi	r26, 0x80	; 128
 688:	bf e3       	ldi	r27, 0x3F	; 63
 68a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 68e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 692:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 696:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 69a:	50 c1       	rjmp	.+672    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               }
               break;
             case 0b11101111:
               if(lineOvercnt == on)fgoBreakcnt = on;
 69c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 6a0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 6a4:	01 97       	sbiw	r24, 0x01	; 1
 6a6:	39 f4       	brne	.+14     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 6b0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 6b4:	43 c1       	rjmp	.+646    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  left_dut = 0.95;
 6b6:	83 e3       	ldi	r24, 0x33	; 51
 6b8:	93 e3       	ldi	r25, 0x33	; 51
 6ba:	a3 e7       	ldi	r26, 0x73	; 115
 6bc:	bf e3       	ldi	r27, 0x3F	; 63
 6be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 6c2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 6c6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 6ca:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 1;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	a0 e8       	ldi	r26, 0x80	; 128
 6d4:	bf e3       	ldi	r27, 0x3F	; 63
 6d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 6da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6de:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 6e2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 6e6:	2a c1       	rjmp	.+596    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               
               
               ////////////////////////
               
             case 0b11100111:
               if(lineOvercnt == on)fgoBreakcnt = on;
 6e8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 6ec:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 6f0:	01 97       	sbiw	r24, 0x01	; 1
 6f2:	39 f4       	brne	.+14     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 6fc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 700:	1d c1       	rjmp	.+570    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else 
               {
                  left_dut = 1;
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	a0 e8       	ldi	r26, 0x80	; 128
 708:	bf e3       	ldi	r27, 0x3F	; 63
 70a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 70e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 712:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 716:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 1;
 71a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 71e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 722:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 726:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 72a:	08 c1       	rjmp	.+528    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               break;
               
               
               /////////////////////////
             case 0b11111110:
               if(lineOvercnt == on)fgoBreakcnt = on;
 72c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 730:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	39 f4       	brne	.+14     	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 740:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 744:	fb c0       	rjmp	.+502    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  RfindLine = on;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 74e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 752:	f4 c0       	rjmp	.+488    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               }
               break;
            case 0b11111100:
               if(lineOvercnt == on)fgoBreakcnt = on;
 754:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 758:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	39 f4       	brne	.+14     	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 768:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 76c:	e7 c0       	rjmp	.+462    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  left_dut = 1;
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	a0 e8       	ldi	r26, 0x80	; 128
 774:	bf e3       	ldi	r27, 0x3F	; 63
 776:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 77a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 77e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 782:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 0;
 786:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 78a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 78e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 792:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 796:	d2 c0       	rjmp	.+420    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               }
                break;
             case 0b11111101:
               if(lineOvercnt == on)fgoBreakcnt = on;
 798:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 79c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	39 f4       	brne	.+14     	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 7ac:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 7b0:	c5 c0       	rjmp	.+394    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  left_dut = 1;
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	a0 e8       	ldi	r26, 0x80	; 128
 7b8:	bf e3       	ldi	r27, 0x3F	; 63
 7ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 7be:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 7c2:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 7c6:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 0.20;
 7ca:	8d ec       	ldi	r24, 0xCD	; 205
 7cc:	9c ec       	ldi	r25, 0xCC	; 204
 7ce:	ac e4       	ldi	r26, 0x4C	; 76
 7d0:	be e3       	ldi	r27, 0x3E	; 62
 7d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 7d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7da:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 7de:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 7e2:	ac c0       	rjmp	.+344    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               }
               break;
            case 0b11111001:
               if(lineOvercnt == on)fgoBreakcnt = on;
 7e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 7e8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	39 f4       	brne	.+14     	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 7f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 7fc:	9f c0       	rjmp	.+318    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  left_dut = 1;
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	a0 e8       	ldi	r26, 0x80	; 128
 804:	bf e3       	ldi	r27, 0x3F	; 63
 806:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 80a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 80e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 812:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 0.40;
 816:	8d ec       	ldi	r24, 0xCD	; 205
 818:	9c ec       	ldi	r25, 0xCC	; 204
 81a:	ac ec       	ldi	r26, 0xCC	; 204
 81c:	be e3       	ldi	r27, 0x3E	; 62
 81e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 822:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 826:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 82a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 82e:	86 c0       	rjmp	.+268    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               }
               break;
             case 0b11111011:
               if(lineOvercnt == on)fgoBreakcnt = on;
 830:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 834:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	39 f4       	brne	.+14     	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 844:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 848:	79 c0       	rjmp	.+242    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  left_dut = 1;
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	a0 e8       	ldi	r26, 0x80	; 128
 850:	bf e3       	ldi	r27, 0x3F	; 63
 852:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 856:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 85a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 85e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 0.66;
 862:	83 ec       	ldi	r24, 0xC3	; 195
 864:	95 ef       	ldi	r25, 0xF5	; 245
 866:	a8 e2       	ldi	r26, 0x28	; 40
 868:	bf e3       	ldi	r27, 0x3F	; 63
 86a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 86e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 872:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 876:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 87a:	60 c0       	rjmp	.+192    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               }
               break;
             case 0b11110011:
               if(lineOvercnt == on)fgoBreakcnt = on;
 87c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 880:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	39 f4       	brne	.+14     	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 890:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 894:	53 c0       	rjmp	.+166    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  left_dut = 1;
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	a0 e8       	ldi	r26, 0x80	; 128
 89c:	bf e3       	ldi	r27, 0x3F	; 63
 89e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 8a2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 8a6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 8aa:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 0.80;
 8ae:	8d ec       	ldi	r24, 0xCD	; 205
 8b0:	9c ec       	ldi	r25, 0xCC	; 204
 8b2:	ac e4       	ldi	r26, 0x4C	; 76
 8b4:	bf e3       	ldi	r27, 0x3F	; 63
 8b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 8ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 8be:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 8c2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 8c6:	3a c0       	rjmp	.+116    	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               }
               break;
             case 0b11110111:
               if(lineOvercnt == on)fgoBreakcnt = on;
 8c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lineOvercnt>
 8cc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lineOvercnt+0x1>
 8d0:	01 97       	sbiw	r24, 0x01	; 1
 8d2:	39 f4       	brne	.+14     	; 0x8e2 <__LOCK_REGION_LENGTH__+0x4e2>
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fgoBreakcnt+0x1>
 8dc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fgoBreakcnt>
 8e0:	2d c0       	rjmp	.+90     	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               else
               {
                  left_dut = 1;
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	a0 e8       	ldi	r26, 0x80	; 128
 8e8:	bf e3       	ldi	r27, 0x3F	; 63
 8ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 8ee:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 8f2:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 8f6:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
                  right_dut = 0.95;
 8fa:	83 e3       	ldi	r24, 0x33	; 51
 8fc:	93 e3       	ldi	r25, 0x33	; 51
 8fe:	a3 e7       	ldi	r26, 0x73	; 115
 900:	bf e3       	ldi	r27, 0x3F	; 63
 902:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 906:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 90a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 90e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 912:	14 c0       	rjmp	.+40     	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
               break;
               //////////////////////
               

            default:
               left_dut = 1;
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	a0 e8       	ldi	r26, 0x80	; 128
 91a:	bf e3       	ldi	r27, 0x3F	; 63
 91c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <left_dut>
 920:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <left_dut+0x1>
 924:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <left_dut+0x2>
 928:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <left_dut+0x3>
               right_dut = 1;
 92c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 930:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 934:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 938:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
               break;
          }

         if(fgoBreakcnt == on)
 93c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <fgoBreakcnt>
 940:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <fgoBreakcnt+0x1>
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	e9 f4       	brne	.+58     	; 0x982 <__LOCK_REGION_LENGTH__+0x582>
         {
            OCR1A = max_speed + 367;
 948:	01 59       	subi	r16, 0x91	; 145
 94a:	1e 4f       	sbci	r17, 0xFE	; 254
 94c:	1b bd       	out	0x2b, r17	; 43
 94e:	0a bd       	out	0x2a, r16	; 42
            OCR1B = max_speed + 367;
 950:	19 bd       	out	0x29, r17	; 41
 952:	08 bd       	out	0x28, r16	; 40
            for(int k = 0; k < mdelay; k++) _delay_ms(100);
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	0a c0       	rjmp	.+20     	; 0x96e <__LOCK_REGION_LENGTH__+0x56e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 95a:	2f ef       	ldi	r18, 0xFF	; 255
 95c:	31 ee       	ldi	r19, 0xE1	; 225
 95e:	44 e0       	ldi	r20, 0x04	; 4
 960:	21 50       	subi	r18, 0x01	; 1
 962:	30 40       	sbci	r19, 0x00	; 0
 964:	40 40       	sbci	r20, 0x00	; 0
 966:	e1 f7       	brne	.-8      	; 0x960 <__LOCK_REGION_LENGTH__+0x560>
 968:	00 c0       	rjmp	.+0      	; 0x96a <__LOCK_REGION_LENGTH__+0x56a>
 96a:	00 00       	nop
 96c:	01 96       	adiw	r24, 0x01	; 1
 96e:	8e 15       	cp	r24, r14
 970:	9f 05       	cpc	r25, r15
 972:	9c f3       	brlt	.-26     	; 0x95a <__LOCK_REGION_LENGTH__+0x55a>
            OCR1A = 0;
 974:	1b bc       	out	0x2b, r1	; 43
 976:	1a bc       	out	0x2a, r1	; 42
            OCR1B = 0;
 978:	19 bc       	out	0x29, r1	; 41
 97a:	18 bc       	out	0x28, r1	; 40
            PORTE = 0b00001111;
 97c:	8f e0       	ldi	r24, 0x0F	; 15
 97e:	83 b9       	out	0x03, r24	; 3
          }
          Uart_Trans(0x0D); //엔터키

       }
   
}
 980:	90 c1       	rjmp	.+800    	; 0xca2 <__LOCK_REGION_LENGTH__+0x8a2>
            OCR1A = 0;
            OCR1B = 0;
            PORTE = 0b00001111;
            break;
         }
         if(RfindLine == on)
 982:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 986:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 98a:	01 97       	sbiw	r24, 0x01	; 1
 98c:	09 f0       	breq	.+2      	; 0x990 <__LOCK_REGION_LENGTH__+0x590>
 98e:	6e c0       	rjmp	.+220    	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
         {
            while(1)
            {
               PORTE = 0b00000110;
 990:	86 e0       	ldi	r24, 0x06	; 6
 992:	83 b9       	out	0x03, r24	; 3

               OCR1A = 200 + 367;
 994:	87 e3       	ldi	r24, 0x37	; 55
 996:	92 e0       	ldi	r25, 0x02	; 2
 998:	9b bd       	out	0x2b, r25	; 43
 99a:	8a bd       	out	0x2a, r24	; 42
               OCR1B = 200 + 367;
 99c:	99 bd       	out	0x29, r25	; 41
 99e:	88 bd       	out	0x28, r24	; 40
            
               PORTA = ~led;
 9a0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <led>
 9a4:	80 95       	com	r24
 9a6:	8b bb       	out	0x1b, r24	; 27
               led = 0b00000000;
 9a8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led+0x1>
 9ac:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led>
               sensdata = 0b00000000;
 9b0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sensdata+0x1>
 9b4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <sensdata>
               for(int i = 0; i < 8; i++)
 9b8:	80 e0       	ldi	r24, 0x00	; 0
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	36 c0       	rjmp	.+108    	; 0xa2a <__LOCK_REGION_LENGTH__+0x62a>
               {
                  ADMUX = 0x40 | i;
 9be:	28 2f       	mov	r18, r24
 9c0:	20 64       	ori	r18, 0x40	; 64
 9c2:	27 b9       	out	0x07, r18	; 7
                  ADCSRA |= (1 << ADSC);
 9c4:	26 b1       	in	r18, 0x06	; 6
 9c6:	20 64       	ori	r18, 0x40	; 64
 9c8:	26 b9       	out	0x06, r18	; 6
                  while(!(ADCSRA & (1 << ADIF)));
 9ca:	34 9b       	sbis	0x06, 4	; 6
 9cc:	fe cf       	rjmp	.-4      	; 0x9ca <__LOCK_REGION_LENGTH__+0x5ca>
                  adc = ADC;
 9ce:	24 b1       	in	r18, 0x04	; 4
 9d0:	35 b1       	in	r19, 0x05	; 5
 9d2:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <adc+0x1>
 9d6:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <adc>
                  if(adc >= 970)
 9da:	2a 3c       	cpi	r18, 0xCA	; 202
 9dc:	33 40       	sbci	r19, 0x03	; 3
 9de:	24 f1       	brlt	.+72     	; 0xa28 <__LOCK_REGION_LENGTH__+0x628>
                  {
                     led |= (128 >> i);
 9e0:	20 e8       	ldi	r18, 0x80	; 128
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	08 2e       	mov	r0, r24
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <__LOCK_REGION_LENGTH__+0x5ec>
 9e8:	35 95       	asr	r19
 9ea:	27 95       	ror	r18
 9ec:	0a 94       	dec	r0
 9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <__LOCK_REGION_LENGTH__+0x5e8>
 9f0:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <led>
 9f4:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <led+0x1>
 9f8:	24 2b       	or	r18, r20
 9fa:	35 2b       	or	r19, r21
 9fc:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <led+0x1>
 a00:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <led>
                     sensdata |= (1 << i);
 a04:	21 e0       	ldi	r18, 0x01	; 1
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	08 2e       	mov	r0, r24
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__LOCK_REGION_LENGTH__+0x610>
 a0c:	22 0f       	add	r18, r18
 a0e:	33 1f       	adc	r19, r19
 a10:	0a 94       	dec	r0
 a12:	e2 f7       	brpl	.-8      	; 0xa0c <__LOCK_REGION_LENGTH__+0x60c>
 a14:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <sensdata>
 a18:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <sensdata+0x1>
 a1c:	24 2b       	or	r18, r20
 a1e:	35 2b       	or	r19, r21
 a20:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <sensdata+0x1>
 a24:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <sensdata>
               OCR1B = 200 + 367;
            
               PORTA = ~led;
               led = 0b00000000;
               sensdata = 0b00000000;
               for(int i = 0; i < 8; i++)
 a28:	01 96       	adiw	r24, 0x01	; 1
 a2a:	88 30       	cpi	r24, 0x08	; 8
 a2c:	91 05       	cpc	r25, r1
 a2e:	3c f2       	brlt	.-114    	; 0x9be <__LOCK_REGION_LENGTH__+0x5be>
                  {
                     led |= (128 >> i);
                     sensdata |= (1 << i);
                  }
               }
               if((sensdata == 0b11100111) || (sensdata == 0b11110111) || (sensdata == 0b11101111) || (sensdata == 0b11000111) || (sensdata == 0b11100011))
 a30:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sensdata>
 a34:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sensdata+0x1>
 a38:	87 3e       	cpi	r24, 0xE7	; 231
 a3a:	91 05       	cpc	r25, r1
 a3c:	69 f0       	breq	.+26     	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
 a3e:	87 3f       	cpi	r24, 0xF7	; 247
 a40:	91 05       	cpc	r25, r1
 a42:	51 f0       	breq	.+20     	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
 a44:	8f 3e       	cpi	r24, 0xEF	; 239
 a46:	91 05       	cpc	r25, r1
 a48:	39 f0       	breq	.+14     	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
 a4a:	87 3c       	cpi	r24, 0xC7	; 199
 a4c:	91 05       	cpc	r25, r1
 a4e:	21 f0       	breq	.+8      	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
 a50:	83 3e       	cpi	r24, 0xE3	; 227
 a52:	91 05       	cpc	r25, r1
 a54:	09 f0       	breq	.+2      	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
 a56:	9c cf       	rjmp	.-200    	; 0x990 <__LOCK_REGION_LENGTH__+0x590>
               {
                  PORTE = 0b00001010;
 a58:	8a e0       	ldi	r24, 0x0A	; 10
 a5a:	83 b9       	out	0x03, r24	; 3

                  OCR1A = 367 + max_speed;
 a5c:	c8 01       	movw	r24, r16
 a5e:	81 59       	subi	r24, 0x91	; 145
 a60:	9e 4f       	sbci	r25, 0xFE	; 254
 a62:	9b bd       	out	0x2b, r25	; 43
 a64:	8a bd       	out	0x2a, r24	; 42
                  OCR1B = 367 + max_speed;
 a66:	99 bd       	out	0x29, r25	; 41
 a68:	88 bd       	out	0x28, r24	; 40
 a6a:	b8 c0       	rjmp	.+368    	; 0xbdc <__LOCK_REGION_LENGTH__+0x7dc>
                  break;
               }
                  
            }
         }
         else if(LfindLine == on)
 a6c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <LfindLine>
 a70:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <LfindLine+0x1>
 a74:	01 97       	sbiw	r24, 0x01	; 1
 a76:	09 f0       	breq	.+2      	; 0xa7a <__LOCK_REGION_LENGTH__+0x67a>
 a78:	6e c0       	rjmp	.+220    	; 0xb56 <__LOCK_REGION_LENGTH__+0x756>
         {
            while(1)
            {
               PORTE = 0b00001001;
 a7a:	89 e0       	ldi	r24, 0x09	; 9
 a7c:	83 b9       	out	0x03, r24	; 3

               OCR1A = 200 + 367;
 a7e:	87 e3       	ldi	r24, 0x37	; 55
 a80:	92 e0       	ldi	r25, 0x02	; 2
 a82:	9b bd       	out	0x2b, r25	; 43
 a84:	8a bd       	out	0x2a, r24	; 42
               OCR1B = 200 + 367;
 a86:	99 bd       	out	0x29, r25	; 41
 a88:	88 bd       	out	0x28, r24	; 40
               
               PORTA = ~led;
 a8a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <led>
 a8e:	80 95       	com	r24
 a90:	8b bb       	out	0x1b, r24	; 27
               led = 0b00000000;
 a92:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led+0x1>
 a96:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led>
               sensdata = 0b00000000;
 a9a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sensdata+0x1>
 a9e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <sensdata>
               for(int i = 0; i < 8; i++)
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	36 c0       	rjmp	.+108    	; 0xb14 <__LOCK_REGION_LENGTH__+0x714>
               {
                  ADMUX = 0x40 | i;
 aa8:	28 2f       	mov	r18, r24
 aaa:	20 64       	ori	r18, 0x40	; 64
 aac:	27 b9       	out	0x07, r18	; 7
                  ADCSRA |= (1 << ADSC);
 aae:	26 b1       	in	r18, 0x06	; 6
 ab0:	20 64       	ori	r18, 0x40	; 64
 ab2:	26 b9       	out	0x06, r18	; 6
                  while(!(ADCSRA & (1 << ADIF)));
 ab4:	34 9b       	sbis	0x06, 4	; 6
 ab6:	fe cf       	rjmp	.-4      	; 0xab4 <__LOCK_REGION_LENGTH__+0x6b4>
                  adc = ADC;
 ab8:	24 b1       	in	r18, 0x04	; 4
 aba:	35 b1       	in	r19, 0x05	; 5
 abc:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <adc+0x1>
 ac0:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <adc>
                  if(adc >= 970)
 ac4:	2a 3c       	cpi	r18, 0xCA	; 202
 ac6:	33 40       	sbci	r19, 0x03	; 3
 ac8:	24 f1       	brlt	.+72     	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
                  {
                     led |= (128 >> i);
 aca:	20 e8       	ldi	r18, 0x80	; 128
 acc:	30 e0       	ldi	r19, 0x00	; 0
 ace:	08 2e       	mov	r0, r24
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <__LOCK_REGION_LENGTH__+0x6d6>
 ad2:	35 95       	asr	r19
 ad4:	27 95       	ror	r18
 ad6:	0a 94       	dec	r0
 ad8:	e2 f7       	brpl	.-8      	; 0xad2 <__LOCK_REGION_LENGTH__+0x6d2>
 ada:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <led>
 ade:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <led+0x1>
 ae2:	24 2b       	or	r18, r20
 ae4:	35 2b       	or	r19, r21
 ae6:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <led+0x1>
 aea:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <led>
                     sensdata |= (1 << i);
 aee:	21 e0       	ldi	r18, 0x01	; 1
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	08 2e       	mov	r0, r24
 af4:	02 c0       	rjmp	.+4      	; 0xafa <__LOCK_REGION_LENGTH__+0x6fa>
 af6:	22 0f       	add	r18, r18
 af8:	33 1f       	adc	r19, r19
 afa:	0a 94       	dec	r0
 afc:	e2 f7       	brpl	.-8      	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
 afe:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <sensdata>
 b02:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <sensdata+0x1>
 b06:	24 2b       	or	r18, r20
 b08:	35 2b       	or	r19, r21
 b0a:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <sensdata+0x1>
 b0e:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <sensdata>
               OCR1B = 200 + 367;
               
               PORTA = ~led;
               led = 0b00000000;
               sensdata = 0b00000000;
               for(int i = 0; i < 8; i++)
 b12:	01 96       	adiw	r24, 0x01	; 1
 b14:	88 30       	cpi	r24, 0x08	; 8
 b16:	91 05       	cpc	r25, r1
 b18:	3c f2       	brlt	.-114    	; 0xaa8 <__LOCK_REGION_LENGTH__+0x6a8>
                  {
                     led |= (128 >> i);
                     sensdata |= (1 << i);
                  }
               }
               if((sensdata == 0b11100111) || (sensdata == 0b11110111) || (sensdata == 0b11101111) || (sensdata == 0b11000111) || (sensdata == 0b11100011))
 b1a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sensdata>
 b1e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sensdata+0x1>
 b22:	87 3e       	cpi	r24, 0xE7	; 231
 b24:	91 05       	cpc	r25, r1
 b26:	69 f0       	breq	.+26     	; 0xb42 <__LOCK_REGION_LENGTH__+0x742>
 b28:	87 3f       	cpi	r24, 0xF7	; 247
 b2a:	91 05       	cpc	r25, r1
 b2c:	51 f0       	breq	.+20     	; 0xb42 <__LOCK_REGION_LENGTH__+0x742>
 b2e:	8f 3e       	cpi	r24, 0xEF	; 239
 b30:	91 05       	cpc	r25, r1
 b32:	39 f0       	breq	.+14     	; 0xb42 <__LOCK_REGION_LENGTH__+0x742>
 b34:	87 3c       	cpi	r24, 0xC7	; 199
 b36:	91 05       	cpc	r25, r1
 b38:	21 f0       	breq	.+8      	; 0xb42 <__LOCK_REGION_LENGTH__+0x742>
 b3a:	83 3e       	cpi	r24, 0xE3	; 227
 b3c:	91 05       	cpc	r25, r1
 b3e:	09 f0       	breq	.+2      	; 0xb42 <__LOCK_REGION_LENGTH__+0x742>
 b40:	9c cf       	rjmp	.-200    	; 0xa7a <__LOCK_REGION_LENGTH__+0x67a>
               {
                  PORTE = 0b00001010;
 b42:	8a e0       	ldi	r24, 0x0A	; 10
 b44:	83 b9       	out	0x03, r24	; 3

                  OCR1A = 367 + max_speed;
 b46:	c8 01       	movw	r24, r16
 b48:	81 59       	subi	r24, 0x91	; 145
 b4a:	9e 4f       	sbci	r25, 0xFE	; 254
 b4c:	9b bd       	out	0x2b, r25	; 43
 b4e:	8a bd       	out	0x2a, r24	; 42
                  OCR1B = 367 + max_speed;
 b50:	99 bd       	out	0x29, r25	; 41
 b52:	88 bd       	out	0x28, r24	; 40
 b54:	43 c0       	rjmp	.+134    	; 0xbdc <__LOCK_REGION_LENGTH__+0x7dc>
            }            
         }
         else
         {
            //PWM 계산
            left_pwm = (float)max_speed * left_dut;
 b56:	b8 01       	movw	r22, r16
 b58:	01 2e       	mov	r0, r17
 b5a:	00 0c       	add	r0, r0
 b5c:	88 0b       	sbc	r24, r24
 b5e:	99 0b       	sbc	r25, r25
 b60:	12 d1       	rcall	.+548    	; 0xd86 <__floatsisf>
 b62:	4b 01       	movw	r8, r22
 b64:	5c 01       	movw	r10, r24
 b66:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <left_dut>
 b6a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <left_dut+0x1>
 b6e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <left_dut+0x2>
 b72:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <left_dut+0x3>
 b76:	6b d1       	rcall	.+726    	; 0xe4e <__mulsf3>
 b78:	d3 d0       	rcall	.+422    	; 0xd20 <__fixsfsi>
 b7a:	6b 01       	movw	r12, r22
 b7c:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <left_pwm+0x1>
 b80:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <left_pwm>
            right_pwm = (float)max_speed * right_dut;
 b84:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 b88:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b8c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 b90:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 b94:	c5 01       	movw	r24, r10
 b96:	b4 01       	movw	r22, r8
 b98:	5a d1       	rcall	.+692    	; 0xe4e <__mulsf3>
 b9a:	c2 d0       	rcall	.+388    	; 0xd20 <__fixsfsi>
 b9c:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <right_pwm+0x1>
 ba0:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <right_pwm>
          
            if(right_pwm < 0) PORTE = 0b00001001;
 ba4:	77 23       	and	r23, r23
 ba6:	1c f4       	brge	.+6      	; 0xbae <__LOCK_REGION_LENGTH__+0x7ae>
 ba8:	89 e0       	ldi	r24, 0x09	; 9
 baa:	83 b9       	out	0x03, r24	; 3
 bac:	07 c0       	rjmp	.+14     	; 0xbbc <__LOCK_REGION_LENGTH__+0x7bc>
            else if(left_pwm < 0) PORTE = 0b00000110;
 bae:	dd 20       	and	r13, r13
 bb0:	1c f4       	brge	.+6      	; 0xbb8 <__LOCK_REGION_LENGTH__+0x7b8>
 bb2:	86 e0       	ldi	r24, 0x06	; 6
 bb4:	83 b9       	out	0x03, r24	; 3
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <__LOCK_REGION_LENGTH__+0x7bc>
            else PORTE = 0b00001010;
 bb8:	8a e0       	ldi	r24, 0x0A	; 10
 bba:	83 b9       	out	0x03, r24	; 3
         
               OCR1B = right_pwm + 367;
 bbc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <right_pwm>
 bc0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <right_pwm+0x1>
 bc4:	81 59       	subi	r24, 0x91	; 145
 bc6:	9e 4f       	sbci	r25, 0xFE	; 254
 bc8:	99 bd       	out	0x29, r25	; 41
 bca:	88 bd       	out	0x28, r24	; 40
         
               OCR1A = left_pwm + 367;
 bcc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <left_pwm>
 bd0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <left_pwm+0x1>
 bd4:	81 59       	subi	r24, 0x91	; 145
 bd6:	9e 4f       	sbci	r25, 0xFE	; 254
 bd8:	9b bd       	out	0x2b, r25	; 43
 bda:	8a bd       	out	0x2a, r24	; 42
         }
          
          int number[3] = {sensdata, OCR1B, OCR1A};
 bdc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sensdata>
 be0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sensdata+0x1>
 be4:	9a 87       	std	Y+10, r25	; 0x0a
 be6:	89 87       	std	Y+9, r24	; 0x09
 be8:	88 b5       	in	r24, 0x28	; 40
 bea:	99 b5       	in	r25, 0x29	; 41
 bec:	9c 87       	std	Y+12, r25	; 0x0c
 bee:	8b 87       	std	Y+11, r24	; 0x0b
 bf0:	8a b5       	in	r24, 0x2a	; 42
 bf2:	9b b5       	in	r25, 0x2b	; 43
 bf4:	9e 87       	std	Y+14, r25	; 0x0e
 bf6:	8d 87       	std	Y+13, r24	; 0x0d
          unsigned char onumber[2][4];
          
          for(int i = 0 ; i < 3 ; i++)
 bf8:	c1 2c       	mov	r12, r1
 bfa:	d1 2c       	mov	r13, r1
 bfc:	4a c0       	rjmp	.+148    	; 0xc92 <__LOCK_REGION_LENGTH__+0x892>
          {
             onumber[i][0] = (number[i]%(10000))/1000 + 48;
 bfe:	f6 01       	movw	r30, r12
 c00:	ee 0f       	add	r30, r30
 c02:	ff 1f       	adc	r31, r31
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	8c 0f       	add	r24, r28
 c0a:	9d 1f       	adc	r25, r29
 c0c:	e8 0f       	add	r30, r24
 c0e:	f9 1f       	adc	r31, r25
 c10:	20 85       	ldd	r18, Z+8	; 0x08
 c12:	31 85       	ldd	r19, Z+9	; 0x09
 c14:	c9 01       	movw	r24, r18
 c16:	60 e1       	ldi	r22, 0x10	; 16
 c18:	77 e2       	ldi	r23, 0x27	; 39
 c1a:	a4 d1       	rcall	.+840    	; 0xf64 <__divmodhi4>
 c1c:	0f 2e       	mov	r0, r31
 c1e:	f8 ee       	ldi	r31, 0xE8	; 232
 c20:	af 2e       	mov	r10, r31
 c22:	f3 e0       	ldi	r31, 0x03	; 3
 c24:	bf 2e       	mov	r11, r31
 c26:	f0 2d       	mov	r31, r0
 c28:	b5 01       	movw	r22, r10
 c2a:	9c d1       	rcall	.+824    	; 0xf64 <__divmodhi4>
 c2c:	f6 01       	movw	r30, r12
 c2e:	ee 0f       	add	r30, r30
 c30:	ff 1f       	adc	r31, r31
 c32:	ee 0f       	add	r30, r30
 c34:	ff 1f       	adc	r31, r31
 c36:	81 e0       	ldi	r24, 0x01	; 1
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	8c 0f       	add	r24, r28
 c3c:	9d 1f       	adc	r25, r29
 c3e:	e8 0f       	add	r30, r24
 c40:	f9 1f       	adc	r31, r25
 c42:	60 5d       	subi	r22, 0xD0	; 208
             onumber[i][1] = (number[i]%(1000))/100 + 48;
 c44:	60 83       	st	Z, r22
 c46:	c9 01       	movw	r24, r18
 c48:	b5 01       	movw	r22, r10
 c4a:	8c d1       	rcall	.+792    	; 0xf64 <__divmodhi4>
 c4c:	0f 2e       	mov	r0, r31
 c4e:	f4 e6       	ldi	r31, 0x64	; 100
 c50:	af 2e       	mov	r10, r31
 c52:	b1 2c       	mov	r11, r1
 c54:	f0 2d       	mov	r31, r0
 c56:	b5 01       	movw	r22, r10
 c58:	85 d1       	rcall	.+778    	; 0xf64 <__divmodhi4>
 c5a:	60 5d       	subi	r22, 0xD0	; 208
             onumber[i][2] = (number[i]%(100))/10 + 48;
 c5c:	61 83       	std	Z+1, r22	; 0x01
 c5e:	c9 01       	movw	r24, r18
 c60:	b5 01       	movw	r22, r10
 c62:	80 d1       	rcall	.+768    	; 0xf64 <__divmodhi4>
 c64:	0f 2e       	mov	r0, r31
 c66:	fa e0       	ldi	r31, 0x0A	; 10
 c68:	af 2e       	mov	r10, r31
 c6a:	b1 2c       	mov	r11, r1
 c6c:	f0 2d       	mov	r31, r0
 c6e:	b5 01       	movw	r22, r10
 c70:	79 d1       	rcall	.+754    	; 0xf64 <__divmodhi4>
             onumber[i][3] = number[i]%(10) + 48;
 c72:	60 5d       	subi	r22, 0xD0	; 208
 c74:	62 83       	std	Z+2, r22	; 0x02
 c76:	c9 01       	movw	r24, r18
 c78:	b5 01       	movw	r22, r10
 c7a:	74 d1       	rcall	.+744    	; 0xf64 <__divmodhi4>
 c7c:	80 5d       	subi	r24, 0xD0	; 208

             Uart_Transnum(onumber[i], 4); //숫자 변환
 c7e:	83 83       	std	Z+3, r24	; 0x03
 c80:	64 e0       	ldi	r22, 0x04	; 4
 c82:	70 e0       	ldi	r23, 0x00	; 0
 c84:	cf 01       	movw	r24, r30
             Uart_Trans(0x20); //띄어버렷
 c86:	34 db       	rcall	.-2456   	; 0x2f0 <Uart_Transnum>
 c88:	80 e2       	ldi	r24, 0x20	; 32
 c8a:	2b db       	rcall	.-2474   	; 0x2e2 <Uart_Trans>
         }
          
          int number[3] = {sensdata, OCR1B, OCR1A};
          unsigned char onumber[2][4];
          
          for(int i = 0 ; i < 3 ; i++)
 c8c:	9f ef       	ldi	r25, 0xFF	; 255
 c8e:	c9 1a       	sub	r12, r25
 c90:	d9 0a       	sbc	r13, r25
 c92:	23 e0       	ldi	r18, 0x03	; 3
 c94:	c2 16       	cp	r12, r18
 c96:	d1 04       	cpc	r13, r1
 c98:	0c f4       	brge	.+2      	; 0xc9c <__LOCK_REGION_LENGTH__+0x89c>
 c9a:	b1 cf       	rjmp	.-158    	; 0xbfe <__LOCK_REGION_LENGTH__+0x7fe>
             onumber[i][3] = number[i]%(10) + 48;

             Uart_Transnum(onumber[i], 4); //숫자 변환
             Uart_Trans(0x20); //띄어버렷
          }
          Uart_Trans(0x0D); //엔터키
 c9c:	8d e0       	ldi	r24, 0x0D	; 13
 c9e:	21 db       	rcall	.-2494   	; 0x2e2 <Uart_Trans>
 ca0:	64 cb       	rjmp	.-2360   	; 0x36a <fgo+0x44>

       }
 ca2:	2e 96       	adiw	r28, 0x0e	; 14
   
}
 ca4:	0f b6       	in	r0, 0x3f	; 63
 ca6:	f8 94       	cli
 ca8:	de bf       	out	0x3e, r29	; 62
 caa:	0f be       	out	0x3f, r0	; 63
 cac:	cd bf       	out	0x3d, r28	; 61
 cae:	df 91       	pop	r29
 cb0:	cf 91       	pop	r28
 cb2:	1f 91       	pop	r17
 cb4:	0f 91       	pop	r16
 cb6:	ff 90       	pop	r15
 cb8:	ef 90       	pop	r14
 cba:	df 90       	pop	r13
 cbc:	cf 90       	pop	r12
 cbe:	bf 90       	pop	r11
 cc0:	af 90       	pop	r10
 cc2:	9f 90       	pop	r9
 cc4:	8f 90       	pop	r8
 cc6:	08 95       	ret

00000cc8 <main>:
 cc8:	ff da       	rcall	.-2562   	; 0x2c8 <Uart_Init>
void Uart_Transnum(unsigned char* data, int size);

int main(void)
{   
   Uart_Init();
   DDRA = 0b11111111;
 cca:	8f ef       	ldi	r24, 0xFF	; 255
 ccc:	8a bb       	out	0x1a, r24	; 26
   DDRF = 0b00000000;
 cce:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   ADCSRA = 0b10000111;
 cd2:	97 e8       	ldi	r25, 0x87	; 135
 cd4:	96 b9       	out	0x06, r25	; 6

   DDRD = 0b00001000;
 cd6:	28 e0       	ldi	r18, 0x08	; 8
 cd8:	21 bb       	out	0x11, r18	; 17
   ADCSRA = 0x87;
 cda:	96 b9       	out	0x06, r25	; 6

   DDRB = 0b11111111;
 cdc:	87 bb       	out	0x17, r24	; 23
   DDRE = 0b00001111;
 cde:	8f e0       	ldi	r24, 0x0F	; 15
 ce0:	82 b9       	out	0x02, r24	; 2
   TCCR1A = (1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<WGM11);
 ce2:	82 ea       	ldi	r24, 0xA2	; 162
 ce4:	8f bd       	out	0x2f, r24	; 47
   TCCR1B = (1<<WGM13) | (1<<WGM12) | (0<<CS02) | (0<<CS01) | (1<<CS00);
 ce6:	89 e1       	ldi	r24, 0x19	; 25
 ce8:	8e bd       	out	0x2e, r24	; 46
   PORTE = 0b00001010;
 cea:	8a e0       	ldi	r24, 0x0A	; 10
 cec:	83 b9       	out	0x03, r24	; 3
   ICR1 = 799;
 cee:	8f e1       	ldi	r24, 0x1F	; 31
 cf0:	93 e0       	ldi	r25, 0x03	; 3
 cf2:	97 bd       	out	0x27, r25	; 39
 cf4:	86 bd       	out	0x26, r24	; 38
   OCR1A = 160;
 cf6:	80 ea       	ldi	r24, 0xA0	; 160
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	9b bd       	out	0x2b, r25	; 43
 cfc:	8a bd       	out	0x2a, r24	; 42
   OCR1B = 160;
 cfe:	99 bd       	out	0x29, r25	; 41
 d00:	88 bd       	out	0x28, r24	; 40

   fgo(200,7);
 d02:	67 e0       	ldi	r22, 0x07	; 7
 d04:	70 e0       	ldi	r23, 0x00	; 0
 d06:	88 ec       	ldi	r24, 0xC8	; 200
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	0d db       	rcall	.-2534   	; 0x326 <fgo>
   turn(200,right,nom);
 d0c:	40 e0       	ldi	r20, 0x00	; 0
 d0e:	50 e0       	ldi	r21, 0x00	; 0
 d10:	61 e0       	ldi	r22, 0x01	; 1
 d12:	70 e0       	ldi	r23, 0x00	; 0
 d14:	88 ec       	ldi	r24, 0xC8	; 200
 d16:	90 e0       	ldi	r25, 0x00	; 0
 d18:	d7 d9       	rcall	.-3154   	; 0xc8 <turn>

   return 0;
}
 d1a:	80 e0       	ldi	r24, 0x00	; 0
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	08 95       	ret

00000d20 <__fixsfsi>:
 d20:	04 d0       	rcall	.+8      	; 0xd2a <__fixunssfsi>
 d22:	68 94       	set
 d24:	b1 11       	cpse	r27, r1
 d26:	8d c0       	rjmp	.+282    	; 0xe42 <__fp_szero>
 d28:	08 95       	ret

00000d2a <__fixunssfsi>:
 d2a:	70 d0       	rcall	.+224    	; 0xe0c <__fp_splitA>
 d2c:	88 f0       	brcs	.+34     	; 0xd50 <__fixunssfsi+0x26>
 d2e:	9f 57       	subi	r25, 0x7F	; 127
 d30:	90 f0       	brcs	.+36     	; 0xd56 <__fixunssfsi+0x2c>
 d32:	b9 2f       	mov	r27, r25
 d34:	99 27       	eor	r25, r25
 d36:	b7 51       	subi	r27, 0x17	; 23
 d38:	a0 f0       	brcs	.+40     	; 0xd62 <__fixunssfsi+0x38>
 d3a:	d1 f0       	breq	.+52     	; 0xd70 <__fixunssfsi+0x46>
 d3c:	66 0f       	add	r22, r22
 d3e:	77 1f       	adc	r23, r23
 d40:	88 1f       	adc	r24, r24
 d42:	99 1f       	adc	r25, r25
 d44:	1a f0       	brmi	.+6      	; 0xd4c <__fixunssfsi+0x22>
 d46:	ba 95       	dec	r27
 d48:	c9 f7       	brne	.-14     	; 0xd3c <__fixunssfsi+0x12>
 d4a:	12 c0       	rjmp	.+36     	; 0xd70 <__fixunssfsi+0x46>
 d4c:	b1 30       	cpi	r27, 0x01	; 1
 d4e:	81 f0       	breq	.+32     	; 0xd70 <__fixunssfsi+0x46>
 d50:	77 d0       	rcall	.+238    	; 0xe40 <__fp_zero>
 d52:	b1 e0       	ldi	r27, 0x01	; 1
 d54:	08 95       	ret
 d56:	74 c0       	rjmp	.+232    	; 0xe40 <__fp_zero>
 d58:	67 2f       	mov	r22, r23
 d5a:	78 2f       	mov	r23, r24
 d5c:	88 27       	eor	r24, r24
 d5e:	b8 5f       	subi	r27, 0xF8	; 248
 d60:	39 f0       	breq	.+14     	; 0xd70 <__fixunssfsi+0x46>
 d62:	b9 3f       	cpi	r27, 0xF9	; 249
 d64:	cc f3       	brlt	.-14     	; 0xd58 <__fixunssfsi+0x2e>
 d66:	86 95       	lsr	r24
 d68:	77 95       	ror	r23
 d6a:	67 95       	ror	r22
 d6c:	b3 95       	inc	r27
 d6e:	d9 f7       	brne	.-10     	; 0xd66 <__fixunssfsi+0x3c>
 d70:	3e f4       	brtc	.+14     	; 0xd80 <__fixunssfsi+0x56>
 d72:	90 95       	com	r25
 d74:	80 95       	com	r24
 d76:	70 95       	com	r23
 d78:	61 95       	neg	r22
 d7a:	7f 4f       	sbci	r23, 0xFF	; 255
 d7c:	8f 4f       	sbci	r24, 0xFF	; 255
 d7e:	9f 4f       	sbci	r25, 0xFF	; 255
 d80:	08 95       	ret

00000d82 <__floatunsisf>:
 d82:	e8 94       	clt
 d84:	09 c0       	rjmp	.+18     	; 0xd98 <__floatsisf+0x12>

00000d86 <__floatsisf>:
 d86:	97 fb       	bst	r25, 7
 d88:	3e f4       	brtc	.+14     	; 0xd98 <__floatsisf+0x12>
 d8a:	90 95       	com	r25
 d8c:	80 95       	com	r24
 d8e:	70 95       	com	r23
 d90:	61 95       	neg	r22
 d92:	7f 4f       	sbci	r23, 0xFF	; 255
 d94:	8f 4f       	sbci	r24, 0xFF	; 255
 d96:	9f 4f       	sbci	r25, 0xFF	; 255
 d98:	99 23       	and	r25, r25
 d9a:	a9 f0       	breq	.+42     	; 0xdc6 <__floatsisf+0x40>
 d9c:	f9 2f       	mov	r31, r25
 d9e:	96 e9       	ldi	r25, 0x96	; 150
 da0:	bb 27       	eor	r27, r27
 da2:	93 95       	inc	r25
 da4:	f6 95       	lsr	r31
 da6:	87 95       	ror	r24
 da8:	77 95       	ror	r23
 daa:	67 95       	ror	r22
 dac:	b7 95       	ror	r27
 dae:	f1 11       	cpse	r31, r1
 db0:	f8 cf       	rjmp	.-16     	; 0xda2 <__floatsisf+0x1c>
 db2:	fa f4       	brpl	.+62     	; 0xdf2 <__floatsisf+0x6c>
 db4:	bb 0f       	add	r27, r27
 db6:	11 f4       	brne	.+4      	; 0xdbc <__floatsisf+0x36>
 db8:	60 ff       	sbrs	r22, 0
 dba:	1b c0       	rjmp	.+54     	; 0xdf2 <__floatsisf+0x6c>
 dbc:	6f 5f       	subi	r22, 0xFF	; 255
 dbe:	7f 4f       	sbci	r23, 0xFF	; 255
 dc0:	8f 4f       	sbci	r24, 0xFF	; 255
 dc2:	9f 4f       	sbci	r25, 0xFF	; 255
 dc4:	16 c0       	rjmp	.+44     	; 0xdf2 <__floatsisf+0x6c>
 dc6:	88 23       	and	r24, r24
 dc8:	11 f0       	breq	.+4      	; 0xdce <__floatsisf+0x48>
 dca:	96 e9       	ldi	r25, 0x96	; 150
 dcc:	11 c0       	rjmp	.+34     	; 0xdf0 <__floatsisf+0x6a>
 dce:	77 23       	and	r23, r23
 dd0:	21 f0       	breq	.+8      	; 0xdda <__floatsisf+0x54>
 dd2:	9e e8       	ldi	r25, 0x8E	; 142
 dd4:	87 2f       	mov	r24, r23
 dd6:	76 2f       	mov	r23, r22
 dd8:	05 c0       	rjmp	.+10     	; 0xde4 <__floatsisf+0x5e>
 dda:	66 23       	and	r22, r22
 ddc:	71 f0       	breq	.+28     	; 0xdfa <__floatsisf+0x74>
 dde:	96 e8       	ldi	r25, 0x86	; 134
 de0:	86 2f       	mov	r24, r22
 de2:	70 e0       	ldi	r23, 0x00	; 0
 de4:	60 e0       	ldi	r22, 0x00	; 0
 de6:	2a f0       	brmi	.+10     	; 0xdf2 <__floatsisf+0x6c>
 de8:	9a 95       	dec	r25
 dea:	66 0f       	add	r22, r22
 dec:	77 1f       	adc	r23, r23
 dee:	88 1f       	adc	r24, r24
 df0:	da f7       	brpl	.-10     	; 0xde8 <__floatsisf+0x62>
 df2:	88 0f       	add	r24, r24
 df4:	96 95       	lsr	r25
 df6:	87 95       	ror	r24
 df8:	97 f9       	bld	r25, 7
 dfa:	08 95       	ret

00000dfc <__fp_split3>:
 dfc:	57 fd       	sbrc	r21, 7
 dfe:	90 58       	subi	r25, 0x80	; 128
 e00:	44 0f       	add	r20, r20
 e02:	55 1f       	adc	r21, r21
 e04:	59 f0       	breq	.+22     	; 0xe1c <__fp_splitA+0x10>
 e06:	5f 3f       	cpi	r21, 0xFF	; 255
 e08:	71 f0       	breq	.+28     	; 0xe26 <__fp_splitA+0x1a>
 e0a:	47 95       	ror	r20

00000e0c <__fp_splitA>:
 e0c:	88 0f       	add	r24, r24
 e0e:	97 fb       	bst	r25, 7
 e10:	99 1f       	adc	r25, r25
 e12:	61 f0       	breq	.+24     	; 0xe2c <__fp_splitA+0x20>
 e14:	9f 3f       	cpi	r25, 0xFF	; 255
 e16:	79 f0       	breq	.+30     	; 0xe36 <__fp_splitA+0x2a>
 e18:	87 95       	ror	r24
 e1a:	08 95       	ret
 e1c:	12 16       	cp	r1, r18
 e1e:	13 06       	cpc	r1, r19
 e20:	14 06       	cpc	r1, r20
 e22:	55 1f       	adc	r21, r21
 e24:	f2 cf       	rjmp	.-28     	; 0xe0a <__fp_split3+0xe>
 e26:	46 95       	lsr	r20
 e28:	f1 df       	rcall	.-30     	; 0xe0c <__fp_splitA>
 e2a:	08 c0       	rjmp	.+16     	; 0xe3c <__fp_splitA+0x30>
 e2c:	16 16       	cp	r1, r22
 e2e:	17 06       	cpc	r1, r23
 e30:	18 06       	cpc	r1, r24
 e32:	99 1f       	adc	r25, r25
 e34:	f1 cf       	rjmp	.-30     	; 0xe18 <__fp_splitA+0xc>
 e36:	86 95       	lsr	r24
 e38:	71 05       	cpc	r23, r1
 e3a:	61 05       	cpc	r22, r1
 e3c:	08 94       	sec
 e3e:	08 95       	ret

00000e40 <__fp_zero>:
 e40:	e8 94       	clt

00000e42 <__fp_szero>:
 e42:	bb 27       	eor	r27, r27
 e44:	66 27       	eor	r22, r22
 e46:	77 27       	eor	r23, r23
 e48:	cb 01       	movw	r24, r22
 e4a:	97 f9       	bld	r25, 7
 e4c:	08 95       	ret

00000e4e <__mulsf3>:
 e4e:	0b d0       	rcall	.+22     	; 0xe66 <__mulsf3x>
 e50:	78 c0       	rjmp	.+240    	; 0xf42 <__fp_round>
 e52:	69 d0       	rcall	.+210    	; 0xf26 <__fp_pscA>
 e54:	28 f0       	brcs	.+10     	; 0xe60 <__mulsf3+0x12>
 e56:	6e d0       	rcall	.+220    	; 0xf34 <__fp_pscB>
 e58:	18 f0       	brcs	.+6      	; 0xe60 <__mulsf3+0x12>
 e5a:	95 23       	and	r25, r21
 e5c:	09 f0       	breq	.+2      	; 0xe60 <__mulsf3+0x12>
 e5e:	5a c0       	rjmp	.+180    	; 0xf14 <__fp_inf>
 e60:	5f c0       	rjmp	.+190    	; 0xf20 <__fp_nan>
 e62:	11 24       	eor	r1, r1
 e64:	ee cf       	rjmp	.-36     	; 0xe42 <__fp_szero>

00000e66 <__mulsf3x>:
 e66:	ca df       	rcall	.-108    	; 0xdfc <__fp_split3>
 e68:	a0 f3       	brcs	.-24     	; 0xe52 <__mulsf3+0x4>

00000e6a <__mulsf3_pse>:
 e6a:	95 9f       	mul	r25, r21
 e6c:	d1 f3       	breq	.-12     	; 0xe62 <__mulsf3+0x14>
 e6e:	95 0f       	add	r25, r21
 e70:	50 e0       	ldi	r21, 0x00	; 0
 e72:	55 1f       	adc	r21, r21
 e74:	62 9f       	mul	r22, r18
 e76:	f0 01       	movw	r30, r0
 e78:	72 9f       	mul	r23, r18
 e7a:	bb 27       	eor	r27, r27
 e7c:	f0 0d       	add	r31, r0
 e7e:	b1 1d       	adc	r27, r1
 e80:	63 9f       	mul	r22, r19
 e82:	aa 27       	eor	r26, r26
 e84:	f0 0d       	add	r31, r0
 e86:	b1 1d       	adc	r27, r1
 e88:	aa 1f       	adc	r26, r26
 e8a:	64 9f       	mul	r22, r20
 e8c:	66 27       	eor	r22, r22
 e8e:	b0 0d       	add	r27, r0
 e90:	a1 1d       	adc	r26, r1
 e92:	66 1f       	adc	r22, r22
 e94:	82 9f       	mul	r24, r18
 e96:	22 27       	eor	r18, r18
 e98:	b0 0d       	add	r27, r0
 e9a:	a1 1d       	adc	r26, r1
 e9c:	62 1f       	adc	r22, r18
 e9e:	73 9f       	mul	r23, r19
 ea0:	b0 0d       	add	r27, r0
 ea2:	a1 1d       	adc	r26, r1
 ea4:	62 1f       	adc	r22, r18
 ea6:	83 9f       	mul	r24, r19
 ea8:	a0 0d       	add	r26, r0
 eaa:	61 1d       	adc	r22, r1
 eac:	22 1f       	adc	r18, r18
 eae:	74 9f       	mul	r23, r20
 eb0:	33 27       	eor	r19, r19
 eb2:	a0 0d       	add	r26, r0
 eb4:	61 1d       	adc	r22, r1
 eb6:	23 1f       	adc	r18, r19
 eb8:	84 9f       	mul	r24, r20
 eba:	60 0d       	add	r22, r0
 ebc:	21 1d       	adc	r18, r1
 ebe:	82 2f       	mov	r24, r18
 ec0:	76 2f       	mov	r23, r22
 ec2:	6a 2f       	mov	r22, r26
 ec4:	11 24       	eor	r1, r1
 ec6:	9f 57       	subi	r25, 0x7F	; 127
 ec8:	50 40       	sbci	r21, 0x00	; 0
 eca:	8a f0       	brmi	.+34     	; 0xeee <__mulsf3_pse+0x84>
 ecc:	e1 f0       	breq	.+56     	; 0xf06 <__mulsf3_pse+0x9c>
 ece:	88 23       	and	r24, r24
 ed0:	4a f0       	brmi	.+18     	; 0xee4 <__mulsf3_pse+0x7a>
 ed2:	ee 0f       	add	r30, r30
 ed4:	ff 1f       	adc	r31, r31
 ed6:	bb 1f       	adc	r27, r27
 ed8:	66 1f       	adc	r22, r22
 eda:	77 1f       	adc	r23, r23
 edc:	88 1f       	adc	r24, r24
 ede:	91 50       	subi	r25, 0x01	; 1
 ee0:	50 40       	sbci	r21, 0x00	; 0
 ee2:	a9 f7       	brne	.-22     	; 0xece <__mulsf3_pse+0x64>
 ee4:	9e 3f       	cpi	r25, 0xFE	; 254
 ee6:	51 05       	cpc	r21, r1
 ee8:	70 f0       	brcs	.+28     	; 0xf06 <__mulsf3_pse+0x9c>
 eea:	14 c0       	rjmp	.+40     	; 0xf14 <__fp_inf>
 eec:	aa cf       	rjmp	.-172    	; 0xe42 <__fp_szero>
 eee:	5f 3f       	cpi	r21, 0xFF	; 255
 ef0:	ec f3       	brlt	.-6      	; 0xeec <__mulsf3_pse+0x82>
 ef2:	98 3e       	cpi	r25, 0xE8	; 232
 ef4:	dc f3       	brlt	.-10     	; 0xeec <__mulsf3_pse+0x82>
 ef6:	86 95       	lsr	r24
 ef8:	77 95       	ror	r23
 efa:	67 95       	ror	r22
 efc:	b7 95       	ror	r27
 efe:	f7 95       	ror	r31
 f00:	e7 95       	ror	r30
 f02:	9f 5f       	subi	r25, 0xFF	; 255
 f04:	c1 f7       	brne	.-16     	; 0xef6 <__mulsf3_pse+0x8c>
 f06:	fe 2b       	or	r31, r30
 f08:	88 0f       	add	r24, r24
 f0a:	91 1d       	adc	r25, r1
 f0c:	96 95       	lsr	r25
 f0e:	87 95       	ror	r24
 f10:	97 f9       	bld	r25, 7
 f12:	08 95       	ret

00000f14 <__fp_inf>:
 f14:	97 f9       	bld	r25, 7
 f16:	9f 67       	ori	r25, 0x7F	; 127
 f18:	80 e8       	ldi	r24, 0x80	; 128
 f1a:	70 e0       	ldi	r23, 0x00	; 0
 f1c:	60 e0       	ldi	r22, 0x00	; 0
 f1e:	08 95       	ret

00000f20 <__fp_nan>:
 f20:	9f ef       	ldi	r25, 0xFF	; 255
 f22:	80 ec       	ldi	r24, 0xC0	; 192
 f24:	08 95       	ret

00000f26 <__fp_pscA>:
 f26:	00 24       	eor	r0, r0
 f28:	0a 94       	dec	r0
 f2a:	16 16       	cp	r1, r22
 f2c:	17 06       	cpc	r1, r23
 f2e:	18 06       	cpc	r1, r24
 f30:	09 06       	cpc	r0, r25
 f32:	08 95       	ret

00000f34 <__fp_pscB>:
 f34:	00 24       	eor	r0, r0
 f36:	0a 94       	dec	r0
 f38:	12 16       	cp	r1, r18
 f3a:	13 06       	cpc	r1, r19
 f3c:	14 06       	cpc	r1, r20
 f3e:	05 06       	cpc	r0, r21
 f40:	08 95       	ret

00000f42 <__fp_round>:
 f42:	09 2e       	mov	r0, r25
 f44:	03 94       	inc	r0
 f46:	00 0c       	add	r0, r0
 f48:	11 f4       	brne	.+4      	; 0xf4e <__fp_round+0xc>
 f4a:	88 23       	and	r24, r24
 f4c:	52 f0       	brmi	.+20     	; 0xf62 <__fp_round+0x20>
 f4e:	bb 0f       	add	r27, r27
 f50:	40 f4       	brcc	.+16     	; 0xf62 <__fp_round+0x20>
 f52:	bf 2b       	or	r27, r31
 f54:	11 f4       	brne	.+4      	; 0xf5a <__fp_round+0x18>
 f56:	60 ff       	sbrs	r22, 0
 f58:	04 c0       	rjmp	.+8      	; 0xf62 <__fp_round+0x20>
 f5a:	6f 5f       	subi	r22, 0xFF	; 255
 f5c:	7f 4f       	sbci	r23, 0xFF	; 255
 f5e:	8f 4f       	sbci	r24, 0xFF	; 255
 f60:	9f 4f       	sbci	r25, 0xFF	; 255
 f62:	08 95       	ret

00000f64 <__divmodhi4>:
 f64:	97 fb       	bst	r25, 7
 f66:	07 2e       	mov	r0, r23
 f68:	16 f4       	brtc	.+4      	; 0xf6e <__divmodhi4+0xa>
 f6a:	00 94       	com	r0
 f6c:	06 d0       	rcall	.+12     	; 0xf7a <__divmodhi4_neg1>
 f6e:	77 fd       	sbrc	r23, 7
 f70:	08 d0       	rcall	.+16     	; 0xf82 <__divmodhi4_neg2>
 f72:	0b d0       	rcall	.+22     	; 0xf8a <__udivmodhi4>
 f74:	07 fc       	sbrc	r0, 7
 f76:	05 d0       	rcall	.+10     	; 0xf82 <__divmodhi4_neg2>
 f78:	3e f4       	brtc	.+14     	; 0xf88 <__divmodhi4_exit>

00000f7a <__divmodhi4_neg1>:
 f7a:	90 95       	com	r25
 f7c:	81 95       	neg	r24
 f7e:	9f 4f       	sbci	r25, 0xFF	; 255
 f80:	08 95       	ret

00000f82 <__divmodhi4_neg2>:
 f82:	70 95       	com	r23
 f84:	61 95       	neg	r22
 f86:	7f 4f       	sbci	r23, 0xFF	; 255

00000f88 <__divmodhi4_exit>:
 f88:	08 95       	ret

00000f8a <__udivmodhi4>:
 f8a:	aa 1b       	sub	r26, r26
 f8c:	bb 1b       	sub	r27, r27
 f8e:	51 e1       	ldi	r21, 0x11	; 17
 f90:	07 c0       	rjmp	.+14     	; 0xfa0 <__udivmodhi4_ep>

00000f92 <__udivmodhi4_loop>:
 f92:	aa 1f       	adc	r26, r26
 f94:	bb 1f       	adc	r27, r27
 f96:	a6 17       	cp	r26, r22
 f98:	b7 07       	cpc	r27, r23
 f9a:	10 f0       	brcs	.+4      	; 0xfa0 <__udivmodhi4_ep>
 f9c:	a6 1b       	sub	r26, r22
 f9e:	b7 0b       	sbc	r27, r23

00000fa0 <__udivmodhi4_ep>:
 fa0:	88 1f       	adc	r24, r24
 fa2:	99 1f       	adc	r25, r25
 fa4:	5a 95       	dec	r21
 fa6:	a9 f7       	brne	.-22     	; 0xf92 <__udivmodhi4_loop>
 fa8:	80 95       	com	r24
 faa:	90 95       	com	r25
 fac:	bc 01       	movw	r22, r24
 fae:	cd 01       	movw	r24, r26
 fb0:	08 95       	ret

00000fb2 <_exit>:
 fb2:	f8 94       	cli

00000fb4 <__stop_program>:
 fb4:	ff cf       	rjmp	.-2      	; 0xfb4 <__stop_program>
